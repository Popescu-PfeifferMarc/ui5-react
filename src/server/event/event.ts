/**
 * Generated by orval v6.11.0 🍺
 * Do not edit manually.
 * Maintenance Insights Service
 * Maintenance Insighs Service provides analytical insights about maintenance events
 * OpenAPI spec version: 1.0.0
 */
import { useQuery } from '@tanstack/react-query';
import type { UseQueryOptions, QueryFunction, UseQueryResult, QueryKey } from '@tanstack/react-query';
import type {
	EventCollectionResponse,
	MisApiEventsEventsGetCollectionParams,
	EventViews,
	EventId,
	EventItemResponse,
	MisApiEventsEventsGetItemParams,
	ViewName,
} from '../model';
import { backendRequest } from '../../utils/backendRequest';
import type { ErrorType } from '../../utils/backendRequest';

/**
 * Returns list of events. Use this resource to discover available events.

Terms allowed in filter and order_by expressions:
-  sid - system identifier
-  host - hostname of the application server
-  instnr - installation number of the system
-  start_date - begin of the maintenance event
-  end_date - end of the maintenance event
-  type - type of maintenance event (currently supported "UPGRADE" and "S4CONVERSION")
-  id - event identifier
-  start_release - version of SAP_BASIS software component before upgrade
-  target_release - version of SAP_BASIS software component after upgrade
-  system_type (prod, dev, qual, earlywatch)
-  run_type - run type (go-live, sandbox)

 * @summary Get collection of events matching filter criteria.
 */
export const misApiEventsEventsGetCollection = (
	params?: MisApiEventsEventsGetCollectionParams,
	signal?: AbortSignal,
) => {
	return backendRequest<EventCollectionResponse>({ url: '/events', method: 'get', params, signal });
};

export const getMisApiEventsEventsGetCollectionQueryKey = (
	params?: MisApiEventsEventsGetCollectionParams,
) => ['/events', ...(params ? [params] : [])];

export type MisApiEventsEventsGetCollectionQueryResult = NonNullable<
	Awaited<ReturnType<typeof misApiEventsEventsGetCollection>>
>;
export type MisApiEventsEventsGetCollectionQueryError = ErrorType<void>;

export const useMisApiEventsEventsGetCollection = <
	TData = Awaited<ReturnType<typeof misApiEventsEventsGetCollection>>,
	TError = ErrorType<void>,
>(
	params?: MisApiEventsEventsGetCollectionParams,
	options?: {
		query?: UseQueryOptions<Awaited<ReturnType<typeof misApiEventsEventsGetCollection>>, TError, TData>;
	},
): UseQueryResult<TData, TError> & { queryKey: QueryKey } => {
	const { query: queryOptions } = options ?? {};

	const queryKey = queryOptions?.queryKey ?? getMisApiEventsEventsGetCollectionQueryKey(params);

	const queryFn: QueryFunction<Awaited<ReturnType<typeof misApiEventsEventsGetCollection>>> = ({
		signal,
	}) => misApiEventsEventsGetCollection(params, signal);

	const query = useQuery<Awaited<ReturnType<typeof misApiEventsEventsGetCollection>>, TError, TData>(
		queryKey,
		queryFn,
		queryOptions,
	) as UseQueryResult<TData, TError> & { queryKey: QueryKey };

	query.queryKey = queryKey;

	return query;
};

/**
 * Returns list of views for a given event
 * @summary Get views available for specified maintenance event
 */
export const misApiEventsViewsGetEventViews = (eventId: EventId, signal?: AbortSignal) => {
	return backendRequest<EventViews>({ url: `/events/${eventId}`, method: 'get', signal });
};

export const getMisApiEventsViewsGetEventViewsQueryKey = (eventId: EventId) => [`/events/${eventId}`];

export type MisApiEventsViewsGetEventViewsQueryResult = NonNullable<
	Awaited<ReturnType<typeof misApiEventsViewsGetEventViews>>
>;
export type MisApiEventsViewsGetEventViewsQueryError = ErrorType<void>;

export const useMisApiEventsViewsGetEventViews = <
	TData = Awaited<ReturnType<typeof misApiEventsViewsGetEventViews>>,
	TError = ErrorType<void>,
>(
	eventId: EventId,
	options?: {
		query?: UseQueryOptions<Awaited<ReturnType<typeof misApiEventsViewsGetEventViews>>, TError, TData>;
	},
): UseQueryResult<TData, TError> & { queryKey: QueryKey } => {
	const { query: queryOptions } = options ?? {};

	const queryKey = queryOptions?.queryKey ?? getMisApiEventsViewsGetEventViewsQueryKey(eventId);

	const queryFn: QueryFunction<Awaited<ReturnType<typeof misApiEventsViewsGetEventViews>>> = ({ signal }) =>
		misApiEventsViewsGetEventViews(eventId, signal);

	const query = useQuery<Awaited<ReturnType<typeof misApiEventsViewsGetEventViews>>, TError, TData>(
		queryKey,
		queryFn,
		{ enabled: !!eventId, ...queryOptions },
	) as UseQueryResult<TData, TError> & { queryKey: QueryKey };

	query.queryKey = queryKey;

	return query;
};

/**
 * Returns information about maintenance event
 * @summary Get information about specified maintenance event
 */
export const misApiEventsEventsGetItem = (
	eventId: EventId,
	viewName: ViewName,
	params?: MisApiEventsEventsGetItemParams,
	signal?: AbortSignal,
) => {
	return backendRequest<EventItemResponse>({
		url: `/events/${eventId}/view/${viewName}`,
		method: 'get',
		params,
		signal,
	});
};

export const getMisApiEventsEventsGetItemQueryKey = (
	eventId: EventId,
	viewName: ViewName,
	params?: MisApiEventsEventsGetItemParams,
) => [`/events/${eventId}/view/${viewName}`, ...(params ? [params] : [])];

export type MisApiEventsEventsGetItemQueryResult = NonNullable<
	Awaited<ReturnType<typeof misApiEventsEventsGetItem>>
>;
export type MisApiEventsEventsGetItemQueryError = ErrorType<void>;

export const useMisApiEventsEventsGetItem = <
	TData = Awaited<ReturnType<typeof misApiEventsEventsGetItem>>,
	TError = ErrorType<void>,
>(
	eventId: EventId,
	viewName: ViewName,
	params?: MisApiEventsEventsGetItemParams,
	options?: {
		query?: UseQueryOptions<Awaited<ReturnType<typeof misApiEventsEventsGetItem>>, TError, TData>;
	},
): UseQueryResult<TData, TError> & { queryKey: QueryKey } => {
	const { query: queryOptions } = options ?? {};

	const queryKey =
		queryOptions?.queryKey ?? getMisApiEventsEventsGetItemQueryKey(eventId, viewName, params);

	const queryFn: QueryFunction<Awaited<ReturnType<typeof misApiEventsEventsGetItem>>> = ({ signal }) =>
		misApiEventsEventsGetItem(eventId, viewName, params, signal);

	const query = useQuery<Awaited<ReturnType<typeof misApiEventsEventsGetItem>>, TError, TData>(
		queryKey,
		queryFn,
		{ enabled: !!(eventId && viewName), ...queryOptions },
	) as UseQueryResult<TData, TError> & { queryKey: QueryKey };

	query.queryKey = queryKey;

	return query;
};
