/**
 * Generated by orval v6.10.3 🍺
 * Do not edit manually.
 * Cat Facts API
 * OpenAPI spec version: 1.0
 */
import { useQuery } from '@tanstack/react-query';
import type { UseQueryOptions, QueryFunction, UseQueryResult, QueryKey } from '@tanstack/react-query';
import type { CatFact, GetRandomFactParams, GetFactsParams } from '../model';
import { backendRequest } from '../../utils/backendRequest';
import type { ErrorType } from '../../utils/backendRequest';

/**
 * Returns a random fact
 * @summary Get Random Fact
 */
export const getRandomFact = (params?: GetRandomFactParams, signal?: AbortSignal) => {
	return backendRequest<CatFact>({ url: '/fact', method: 'get', params, signal });
};

export const getGetRandomFactQueryKey = (params?: GetRandomFactParams) => [
	'/fact',
	...(params ? [params] : []),
];

export type GetRandomFactQueryResult = NonNullable<Awaited<ReturnType<typeof getRandomFact>>>;
export type GetRandomFactQueryError = ErrorType<void>;

export const useGetRandomFact = <TData = Awaited<ReturnType<typeof getRandomFact>>, TError = ErrorType<void>>(
	params?: GetRandomFactParams,
	options?: { query?: UseQueryOptions<Awaited<ReturnType<typeof getRandomFact>>, TError, TData> },
): UseQueryResult<TData, TError> & { queryKey: QueryKey } => {
	const { query: queryOptions } = options ?? {};

	const queryKey = queryOptions?.queryKey ?? getGetRandomFactQueryKey(params);

	const queryFn: QueryFunction<Awaited<ReturnType<typeof getRandomFact>>> = ({ signal }) =>
		getRandomFact(params, signal);

	const query = useQuery<Awaited<ReturnType<typeof getRandomFact>>, TError, TData>(
		queryKey,
		queryFn,
		queryOptions,
	) as UseQueryResult<TData, TError> & { queryKey: QueryKey };

	query.queryKey = queryKey;

	return query;
};

/**
 * Returns a a list of facts
 * @summary Get a list of facts
 */
export const getFacts = (params?: GetFactsParams, signal?: AbortSignal) => {
	return backendRequest<CatFact[]>({ url: '/facts', method: 'get', params, signal });
};

export const getGetFactsQueryKey = (params?: GetFactsParams) => ['/facts', ...(params ? [params] : [])];

export type GetFactsQueryResult = NonNullable<Awaited<ReturnType<typeof getFacts>>>;
export type GetFactsQueryError = ErrorType<unknown>;

export const useGetFacts = <TData = Awaited<ReturnType<typeof getFacts>>, TError = ErrorType<unknown>>(
	params?: GetFactsParams,
	options?: { query?: UseQueryOptions<Awaited<ReturnType<typeof getFacts>>, TError, TData> },
): UseQueryResult<TData, TError> & { queryKey: QueryKey } => {
	const { query: queryOptions } = options ?? {};

	const queryKey = queryOptions?.queryKey ?? getGetFactsQueryKey(params);

	const queryFn: QueryFunction<Awaited<ReturnType<typeof getFacts>>> = ({ signal }) =>
		getFacts(params, signal);

	const query = useQuery<Awaited<ReturnType<typeof getFacts>>, TError, TData>(
		queryKey,
		queryFn,
		queryOptions,
	) as UseQueryResult<TData, TError> & { queryKey: QueryKey };

	query.queryKey = queryKey;

	return query;
};
