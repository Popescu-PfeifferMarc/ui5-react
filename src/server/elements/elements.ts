/**
 * Generated by orval v6.11.0 🍺
 * Do not edit manually.
 * Maintenance Insights Service
 * Maintenance Insighs Service provides analytical insights about maintenance events
 * OpenAPI spec version: 1.0.0
 */
import { useQuery } from '@tanstack/react-query';
import type { UseQueryOptions, QueryFunction, UseQueryResult, QueryKey } from '@tanstack/react-query';
import type {
	ElementsResponseHistogram,
	MisApiElementsHistogramGetElementsHistogramParams,
	EventId,
	ViewName,
	NodeId,
	ElementType,
	ElementsCollectionResponse,
	MisApiElementsItemsGetElementsItemsParams,
} from '../model';
import { backendRequest } from '../../utils/backendRequest';
import type { ErrorType } from '../../utils/backendRequest';

/**
 * Returns list of of elements with durations and timestamps or a histogram
 * @summary Get list of elements (methods, tables, phases) for a given node
 */
export const misApiElementsHistogramGetElementsHistogram = (
	eventId: EventId,
	viewName: ViewName,
	nodeId: NodeId,
	elementType: ElementType,
	params?: MisApiElementsHistogramGetElementsHistogramParams,
	signal?: AbortSignal,
) => {
	return backendRequest<ElementsResponseHistogram>({
		url: `/events/${eventId}/view/${viewName}/node/${nodeId}/elements/histogram/${elementType}`,
		method: 'get',
		params,
		signal,
	});
};

export const getMisApiElementsHistogramGetElementsHistogramQueryKey = (
	eventId: EventId,
	viewName: ViewName,
	nodeId: NodeId,
	elementType: ElementType,
	params?: MisApiElementsHistogramGetElementsHistogramParams,
) => [
	`/events/${eventId}/view/${viewName}/node/${nodeId}/elements/histogram/${elementType}`,
	...(params ? [params] : []),
];

export type MisApiElementsHistogramGetElementsHistogramQueryResult = NonNullable<
	Awaited<ReturnType<typeof misApiElementsHistogramGetElementsHistogram>>
>;
export type MisApiElementsHistogramGetElementsHistogramQueryError = ErrorType<void>;

export const useMisApiElementsHistogramGetElementsHistogram = <
	TData = Awaited<ReturnType<typeof misApiElementsHistogramGetElementsHistogram>>,
	TError = ErrorType<void>,
>(
	eventId: EventId,
	viewName: ViewName,
	nodeId: NodeId,
	elementType: ElementType,
	params?: MisApiElementsHistogramGetElementsHistogramParams,
	options?: {
		query?: UseQueryOptions<
			Awaited<ReturnType<typeof misApiElementsHistogramGetElementsHistogram>>,
			TError,
			TData
		>;
	},
): UseQueryResult<TData, TError> & { queryKey: QueryKey } => {
	const { query: queryOptions } = options ?? {};

	const queryKey =
		queryOptions?.queryKey ??
		getMisApiElementsHistogramGetElementsHistogramQueryKey(
			eventId,
			viewName,
			nodeId,
			elementType,
			params,
		);

	const queryFn: QueryFunction<Awaited<ReturnType<typeof misApiElementsHistogramGetElementsHistogram>>> = ({
		signal,
	}) => misApiElementsHistogramGetElementsHistogram(eventId, viewName, nodeId, elementType, params, signal);

	const query = useQuery<
		Awaited<ReturnType<typeof misApiElementsHistogramGetElementsHistogram>>,
		TError,
		TData
	>(queryKey, queryFn, {
		enabled: !!(eventId && viewName && nodeId && elementType),
		...queryOptions,
	}) as UseQueryResult<TData, TError> & { queryKey: QueryKey };

	query.queryKey = queryKey;

	return query;
};

/**
 * Returns list of of elements with durations and timestamps or a histogram
 * @summary Get list of elements (methods, tables, phases) for a given node
 */
export const misApiElementsItemsGetElementsItems = (
	eventId: EventId,
	viewName: ViewName,
	nodeId: NodeId,
	elementType: ElementType,
	params?: MisApiElementsItemsGetElementsItemsParams,
	signal?: AbortSignal,
) => {
	return backendRequest<ElementsCollectionResponse>({
		url: `/events/${eventId}/view/${viewName}/node/${nodeId}/elements/items/${elementType}`,
		method: 'get',
		params,
		signal,
	});
};

export const getMisApiElementsItemsGetElementsItemsQueryKey = (
	eventId: EventId,
	viewName: ViewName,
	nodeId: NodeId,
	elementType: ElementType,
	params?: MisApiElementsItemsGetElementsItemsParams,
) => [
	`/events/${eventId}/view/${viewName}/node/${nodeId}/elements/items/${elementType}`,
	...(params ? [params] : []),
];

export type MisApiElementsItemsGetElementsItemsQueryResult = NonNullable<
	Awaited<ReturnType<typeof misApiElementsItemsGetElementsItems>>
>;
export type MisApiElementsItemsGetElementsItemsQueryError = ErrorType<void>;

export const useMisApiElementsItemsGetElementsItems = <
	TData = Awaited<ReturnType<typeof misApiElementsItemsGetElementsItems>>,
	TError = ErrorType<void>,
>(
	eventId: EventId,
	viewName: ViewName,
	nodeId: NodeId,
	elementType: ElementType,
	params?: MisApiElementsItemsGetElementsItemsParams,
	options?: {
		query?: UseQueryOptions<
			Awaited<ReturnType<typeof misApiElementsItemsGetElementsItems>>,
			TError,
			TData
		>;
	},
): UseQueryResult<TData, TError> & { queryKey: QueryKey } => {
	const { query: queryOptions } = options ?? {};

	const queryKey =
		queryOptions?.queryKey ??
		getMisApiElementsItemsGetElementsItemsQueryKey(eventId, viewName, nodeId, elementType, params);

	const queryFn: QueryFunction<Awaited<ReturnType<typeof misApiElementsItemsGetElementsItems>>> = ({
		signal,
	}) => misApiElementsItemsGetElementsItems(eventId, viewName, nodeId, elementType, params, signal);

	const query = useQuery<Awaited<ReturnType<typeof misApiElementsItemsGetElementsItems>>, TError, TData>(
		queryKey,
		queryFn,
		{ enabled: !!(eventId && viewName && nodeId && elementType), ...queryOptions },
	) as UseQueryResult<TData, TError> & { queryKey: QueryKey };

	query.queryKey = queryKey;

	return query;
};
