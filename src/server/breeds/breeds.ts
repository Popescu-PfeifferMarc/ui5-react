/**
 * Generated by orval v6.10.3 🍺
 * Do not edit manually.
 * Cat Facts API
 * OpenAPI spec version: 1.0
 */
import { useQuery } from '@tanstack/react-query';
import type { UseQueryOptions, QueryFunction, UseQueryResult, QueryKey } from '@tanstack/react-query';
import type { Breed, GetBreedsParams } from '../model';
import { backendRequest } from '../../utils/backendRequest';
import type { ErrorType } from '../../utils/backendRequest';

/**
 * Returns a a list of breeds
 * @summary Get a list of breeds
 */
export const getBreeds = (params?: GetBreedsParams, signal?: AbortSignal) => {
	return backendRequest<Breed[]>({ url: '/breeds', method: 'get', params, signal });
};

export const getGetBreedsQueryKey = (params?: GetBreedsParams) => ['/breeds', ...(params ? [params] : [])];

export type GetBreedsQueryResult = NonNullable<Awaited<ReturnType<typeof getBreeds>>>;
export type GetBreedsQueryError = ErrorType<unknown>;

export const useGetBreeds = <TData = Awaited<ReturnType<typeof getBreeds>>, TError = ErrorType<unknown>>(
	params?: GetBreedsParams,
	options?: { query?: UseQueryOptions<Awaited<ReturnType<typeof getBreeds>>, TError, TData> },
): UseQueryResult<TData, TError> & { queryKey: QueryKey } => {
	const { query: queryOptions } = options ?? {};

	const queryKey = queryOptions?.queryKey ?? getGetBreedsQueryKey(params);

	const queryFn: QueryFunction<Awaited<ReturnType<typeof getBreeds>>> = ({ signal }) =>
		getBreeds(params, signal);

	const query = useQuery<Awaited<ReturnType<typeof getBreeds>>, TError, TData>(
		queryKey,
		queryFn,
		queryOptions,
	) as UseQueryResult<TData, TError> & { queryKey: QueryKey };

	query.queryKey = queryKey;

	return query;
};
