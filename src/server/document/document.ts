/**
 * Generated by orval v6.11.0 🍺
 * Do not edit manually.
 * Maintenance Insights Service
 * Maintenance Insighs Service provides analytical insights about maintenance events
 * OpenAPI spec version: 1.0.0
 */
import { useQuery } from '@tanstack/react-query';
import type { UseQueryOptions, QueryFunction, UseQueryResult, QueryKey } from '@tanstack/react-query';
import type {
	DocumentsCollection,
	EventId,
	ViewName,
	MisApiDocumentsItemGetParams,
	DocumentId,
} from '../model';
import { backendRequest } from '../../utils/backendRequest';
import type { ErrorType } from '../../utils/backendRequest';

/**
 * Returns list of analytical documents available for a given event
 * @summary Get list of analytical documents available for a given event
 */
export const misApiDocumentsCollectionGet = (eventId: EventId, viewName: ViewName, signal?: AbortSignal) => {
	return backendRequest<DocumentsCollection>({
		url: `/events/${eventId}/view/${viewName}/documents`,
		method: 'get',
		signal,
	});
};

export const getMisApiDocumentsCollectionGetQueryKey = (eventId: EventId, viewName: ViewName) => [
	`/events/${eventId}/view/${viewName}/documents`,
];

export type MisApiDocumentsCollectionGetQueryResult = NonNullable<
	Awaited<ReturnType<typeof misApiDocumentsCollectionGet>>
>;
export type MisApiDocumentsCollectionGetQueryError = ErrorType<void>;

export const useMisApiDocumentsCollectionGet = <
	TData = Awaited<ReturnType<typeof misApiDocumentsCollectionGet>>,
	TError = ErrorType<void>,
>(
	eventId: EventId,
	viewName: ViewName,
	options?: {
		query?: UseQueryOptions<Awaited<ReturnType<typeof misApiDocumentsCollectionGet>>, TError, TData>;
	},
): UseQueryResult<TData, TError> & { queryKey: QueryKey } => {
	const { query: queryOptions } = options ?? {};

	const queryKey = queryOptions?.queryKey ?? getMisApiDocumentsCollectionGetQueryKey(eventId, viewName);

	const queryFn: QueryFunction<Awaited<ReturnType<typeof misApiDocumentsCollectionGet>>> = ({ signal }) =>
		misApiDocumentsCollectionGet(eventId, viewName, signal);

	const query = useQuery<Awaited<ReturnType<typeof misApiDocumentsCollectionGet>>, TError, TData>(
		queryKey,
		queryFn,
		{ enabled: !!(eventId && viewName), ...queryOptions },
	) as UseQueryResult<TData, TError> & { queryKey: QueryKey };

	query.queryKey = queryKey;

	return query;
};

/**
 * Returns the content of the analytical document.
 * @summary Get the content of analytical document for the given document id
 */
export const misApiDocumentsItemGet = (
	eventId: EventId,
	viewName: ViewName,
	documentId: DocumentId,
	params?: MisApiDocumentsItemGetParams,
	signal?: AbortSignal,
) => {
	return backendRequest<string>({
		url: `/events/${eventId}/view/${viewName}/documents/${documentId}`,
		method: 'get',
		params,
		signal,
	});
};

export const getMisApiDocumentsItemGetQueryKey = (
	eventId: EventId,
	viewName: ViewName,
	documentId: DocumentId,
	params?: MisApiDocumentsItemGetParams,
) => [`/events/${eventId}/view/${viewName}/documents/${documentId}`, ...(params ? [params] : [])];

export type MisApiDocumentsItemGetQueryResult = NonNullable<
	Awaited<ReturnType<typeof misApiDocumentsItemGet>>
>;
export type MisApiDocumentsItemGetQueryError = ErrorType<void>;

export const useMisApiDocumentsItemGet = <
	TData = Awaited<ReturnType<typeof misApiDocumentsItemGet>>,
	TError = ErrorType<void>,
>(
	eventId: EventId,
	viewName: ViewName,
	documentId: DocumentId,
	params?: MisApiDocumentsItemGetParams,
	options?: { query?: UseQueryOptions<Awaited<ReturnType<typeof misApiDocumentsItemGet>>, TError, TData> },
): UseQueryResult<TData, TError> & { queryKey: QueryKey } => {
	const { query: queryOptions } = options ?? {};

	const queryKey =
		queryOptions?.queryKey ?? getMisApiDocumentsItemGetQueryKey(eventId, viewName, documentId, params);

	const queryFn: QueryFunction<Awaited<ReturnType<typeof misApiDocumentsItemGet>>> = ({ signal }) =>
		misApiDocumentsItemGet(eventId, viewName, documentId, params, signal);

	const query = useQuery<Awaited<ReturnType<typeof misApiDocumentsItemGet>>, TError, TData>(
		queryKey,
		queryFn,
		{ enabled: !!(eventId && viewName && documentId), ...queryOptions },
	) as UseQueryResult<TData, TError> & { queryKey: QueryKey };

	query.queryKey = queryKey;

	return query;
};
