/**
 * Generated by orval v6.11.0 🍺
 * Do not edit manually.
 * Maintenance Insights Service
 * Maintenance Insighs Service provides analytical insights about maintenance events
 * OpenAPI spec version: 1.0.0
 */
import { useQuery, useMutation } from '@tanstack/react-query';
import type {
	UseQueryOptions,
	UseMutationOptions,
	QueryFunction,
	MutationFunction,
	UseQueryResult,
	QueryKey,
} from '@tanstack/react-query';
import type { UploadDescription, UploadResult, MisApiUploadUploadPostBody } from '../model';
import { backendRequest } from '../../utils/backendRequest';
import type { ErrorType } from '../../utils/backendRequest';

/**
 * This endpoint delivers information about the upload functionality of the API.
 */
export const misApiUploadDescriptionGet = (signal?: AbortSignal) => {
	return backendRequest<UploadDescription>({ url: '/upload', method: 'get', signal });
};

export const getMisApiUploadDescriptionGetQueryKey = () => ['/upload'];

export type MisApiUploadDescriptionGetQueryResult = NonNullable<
	Awaited<ReturnType<typeof misApiUploadDescriptionGet>>
>;
export type MisApiUploadDescriptionGetQueryError = ErrorType<unknown>;

export const useMisApiUploadDescriptionGet = <
	TData = Awaited<ReturnType<typeof misApiUploadDescriptionGet>>,
	TError = ErrorType<unknown>,
>(options?: {
	query?: UseQueryOptions<Awaited<ReturnType<typeof misApiUploadDescriptionGet>>, TError, TData>;
}): UseQueryResult<TData, TError> & { queryKey: QueryKey } => {
	const { query: queryOptions } = options ?? {};

	const queryKey = queryOptions?.queryKey ?? getMisApiUploadDescriptionGetQueryKey();

	const queryFn: QueryFunction<Awaited<ReturnType<typeof misApiUploadDescriptionGet>>> = ({ signal }) =>
		misApiUploadDescriptionGet(signal);

	const query = useQuery<Awaited<ReturnType<typeof misApiUploadDescriptionGet>>, TError, TData>(
		queryKey,
		queryFn,
		queryOptions,
	) as UseQueryResult<TData, TError> & { queryKey: QueryKey };

	query.queryKey = queryKey;

	return query;
};

/**
 * This endpoint can be used to upload APPLANA and UPGANA files to MIS.
 */
export const misApiUploadUploadPost = (misApiUploadUploadPostBody: MisApiUploadUploadPostBody) => {
	const formData = new FormData();
	if (misApiUploadUploadPostBody.submittedFiles !== undefined) {
		misApiUploadUploadPostBody.submittedFiles.forEach((value) =>
			formData.append('submittedFiles', value),
		);
	}

	return backendRequest<UploadResult>({
		url: '/upload',
		method: 'post',
		headers: { 'Content-Type': 'multipart/form-data' },
		data: formData,
	});
};

export type MisApiUploadUploadPostMutationResult = NonNullable<
	Awaited<ReturnType<typeof misApiUploadUploadPost>>
>;
export type MisApiUploadUploadPostMutationBody = MisApiUploadUploadPostBody;
export type MisApiUploadUploadPostMutationError = ErrorType<unknown>;

export const useMisApiUploadUploadPost = <TError = ErrorType<unknown>, TContext = unknown>(options?: {
	mutation?: UseMutationOptions<
		Awaited<ReturnType<typeof misApiUploadUploadPost>>,
		TError,
		{ data: MisApiUploadUploadPostBody },
		TContext
	>;
}) => {
	const { mutation: mutationOptions } = options ?? {};

	const mutationFn: MutationFunction<
		Awaited<ReturnType<typeof misApiUploadUploadPost>>,
		{ data: MisApiUploadUploadPostBody }
	> = (props) => {
		const { data } = props ?? {};

		return misApiUploadUploadPost(data);
	};

	return useMutation<
		Awaited<ReturnType<typeof misApiUploadUploadPost>>,
		TError,
		{ data: MisApiUploadUploadPostBody },
		TContext
	>(mutationFn, mutationOptions);
};
