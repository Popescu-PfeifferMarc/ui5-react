/**
 * Generated by orval v6.11.0 🍺
 * Do not edit manually.
 * Maintenance Insights Service
 * Maintenance Insighs Service provides analytical insights about maintenance events
 * OpenAPI spec version: 1.0.0
 */
import { useQuery } from '@tanstack/react-query';
import type { UseQueryOptions, QueryFunction, UseQueryResult, QueryKey } from '@tanstack/react-query';
import type { HealthzResponse, MisApiHealthGetParams } from '../model';
import { backendRequest } from '../../utils/backendRequest';
import type { ErrorType } from '../../utils/backendRequest';

/**
 * This is a health check service. Use it to check operational status of the service.
 */
export const misApiHealthGet = (params?: MisApiHealthGetParams, signal?: AbortSignal) => {
	return backendRequest<HealthzResponse>({ url: '/healthz', method: 'get', params, signal });
};

export const getMisApiHealthGetQueryKey = (params?: MisApiHealthGetParams) => [
	'/healthz',
	...(params ? [params] : []),
];

export type MisApiHealthGetQueryResult = NonNullable<Awaited<ReturnType<typeof misApiHealthGet>>>;
export type MisApiHealthGetQueryError = ErrorType<void>;

export const useMisApiHealthGet = <
	TData = Awaited<ReturnType<typeof misApiHealthGet>>,
	TError = ErrorType<void>,
>(
	params?: MisApiHealthGetParams,
	options?: { query?: UseQueryOptions<Awaited<ReturnType<typeof misApiHealthGet>>, TError, TData> },
): UseQueryResult<TData, TError> & { queryKey: QueryKey } => {
	const { query: queryOptions } = options ?? {};

	const queryKey = queryOptions?.queryKey ?? getMisApiHealthGetQueryKey(params);

	const queryFn: QueryFunction<Awaited<ReturnType<typeof misApiHealthGet>>> = ({ signal }) =>
		misApiHealthGet(params, signal);

	const query = useQuery<Awaited<ReturnType<typeof misApiHealthGet>>, TError, TData>(
		queryKey,
		queryFn,
		queryOptions,
	) as UseQueryResult<TData, TError> & { queryKey: QueryKey };

	query.queryKey = queryKey;

	return query;
};
