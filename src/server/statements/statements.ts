/**
 * Generated by orval v6.11.0 🍺
 * Do not edit manually.
 * Maintenance Insights Service
 * Maintenance Insighs Service provides analytical insights about maintenance events
 * OpenAPI spec version: 1.0.0
 */
import { useQuery } from '@tanstack/react-query';
import type { UseQueryOptions, QueryFunction, UseQueryResult, QueryKey } from '@tanstack/react-query';
import type { NodeStatements, EventId, ViewName, NodeId } from '../model';
import { backendRequest } from '../../utils/backendRequest';
import type { ErrorType } from '../../utils/backendRequest';

/**
 * Returns messages object
 * @summary Get messages (check results) for a given duration node
 */
export const misApiStatementsGet = (
	eventId: EventId,
	viewName: ViewName,
	nodeId: NodeId,
	signal?: AbortSignal,
) => {
	return backendRequest<NodeStatements>({
		url: `/events/${eventId}/view/${viewName}/node/${nodeId}/statements`,
		method: 'get',
		signal,
	});
};

export const getMisApiStatementsGetQueryKey = (eventId: EventId, viewName: ViewName, nodeId: NodeId) => [
	`/events/${eventId}/view/${viewName}/node/${nodeId}/statements`,
];

export type MisApiStatementsGetQueryResult = NonNullable<Awaited<ReturnType<typeof misApiStatementsGet>>>;
export type MisApiStatementsGetQueryError = ErrorType<void>;

export const useMisApiStatementsGet = <
	TData = Awaited<ReturnType<typeof misApiStatementsGet>>,
	TError = ErrorType<void>,
>(
	eventId: EventId,
	viewName: ViewName,
	nodeId: NodeId,
	options?: { query?: UseQueryOptions<Awaited<ReturnType<typeof misApiStatementsGet>>, TError, TData> },
): UseQueryResult<TData, TError> & { queryKey: QueryKey } => {
	const { query: queryOptions } = options ?? {};

	const queryKey = queryOptions?.queryKey ?? getMisApiStatementsGetQueryKey(eventId, viewName, nodeId);

	const queryFn: QueryFunction<Awaited<ReturnType<typeof misApiStatementsGet>>> = ({ signal }) =>
		misApiStatementsGet(eventId, viewName, nodeId, signal);

	const query = useQuery<Awaited<ReturnType<typeof misApiStatementsGet>>, TError, TData>(
		queryKey,
		queryFn,
		{ enabled: !!(eventId && viewName && nodeId), ...queryOptions },
	) as UseQueryResult<TData, TError> & { queryKey: QueryKey };

	query.queryKey = queryKey;

	return query;
};
