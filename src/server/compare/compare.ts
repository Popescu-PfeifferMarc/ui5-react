/**
 * Generated by orval v6.11.0 🍺
 * Do not edit manually.
 * Maintenance Insights Service
 * Maintenance Insighs Service provides analytical insights about maintenance events
 * OpenAPI spec version: 1.0.0
 */
import { useQuery } from '@tanstack/react-query';
import type { UseQueryOptions, QueryFunction, UseQueryResult, QueryKey } from '@tanstack/react-query';
import type { ComparisonResponse, MisApiCompareCompareCompareParams, EventId, ViewName } from '../model';
import { backendRequest } from '../../utils/backendRequest';
import type { ErrorType } from '../../utils/backendRequest';

/**
 * Returns two events compared to each other
 * @summary Compare events with each other
 */
export const misApiCompareCompareCompare = (
	baseId: EventId,
	viewName: ViewName,
	params: MisApiCompareCompareCompareParams,
	signal?: AbortSignal,
) => {
	return backendRequest<ComparisonResponse>({
		url: `/events/${baseId}/view/${viewName}/comparison`,
		method: 'get',
		params,
		signal,
	});
};

export const getMisApiCompareCompareCompareQueryKey = (
	baseId: EventId,
	viewName: ViewName,
	params: MisApiCompareCompareCompareParams,
) => [`/events/${baseId}/view/${viewName}/comparison`, ...(params ? [params] : [])];

export type MisApiCompareCompareCompareQueryResult = NonNullable<
	Awaited<ReturnType<typeof misApiCompareCompareCompare>>
>;
export type MisApiCompareCompareCompareQueryError = ErrorType<void>;

export const useMisApiCompareCompareCompare = <
	TData = Awaited<ReturnType<typeof misApiCompareCompareCompare>>,
	TError = ErrorType<void>,
>(
	baseId: EventId,
	viewName: ViewName,
	params: MisApiCompareCompareCompareParams,
	options?: {
		query?: UseQueryOptions<Awaited<ReturnType<typeof misApiCompareCompareCompare>>, TError, TData>;
	},
): UseQueryResult<TData, TError> & { queryKey: QueryKey } => {
	const { query: queryOptions } = options ?? {};

	const queryKey =
		queryOptions?.queryKey ?? getMisApiCompareCompareCompareQueryKey(baseId, viewName, params);

	const queryFn: QueryFunction<Awaited<ReturnType<typeof misApiCompareCompareCompare>>> = ({ signal }) =>
		misApiCompareCompareCompare(baseId, viewName, params, signal);

	const query = useQuery<Awaited<ReturnType<typeof misApiCompareCompareCompare>>, TError, TData>(
		queryKey,
		queryFn,
		{ enabled: !!(baseId && viewName), ...queryOptions },
	) as UseQueryResult<TData, TError> & { queryKey: QueryKey };

	query.queryKey = queryKey;

	return query;
};
