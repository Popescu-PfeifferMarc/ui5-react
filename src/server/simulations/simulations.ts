/**
 * Generated by orval v6.11.0 🍺
 * Do not edit manually.
 * Maintenance Insights Service
 * Maintenance Insighs Service provides analytical insights about maintenance events
 * OpenAPI spec version: 1.0.0
 */
import { useQuery, useMutation } from '@tanstack/react-query';
import type {
	UseQueryOptions,
	UseMutationOptions,
	QueryFunction,
	MutationFunction,
	UseQueryResult,
	QueryKey,
} from '@tanstack/react-query';
import type {
	SimulationsDescriptionResponse,
	EventId,
	ViewName,
	SimulationResult,
	SimulationsRequest,
} from '../model';
import { backendRequest } from '../../utils/backendRequest';
import type { ErrorType } from '../../utils/backendRequest';

/**
 * Returns collection of simulations with their descriptions
 * @summary Get informations about the simulations, which are applicable to the current event.
 */
export const misApiSimulationsDiscoveryGetSimulationDescriptions = (
	eventId: EventId,
	viewName: ViewName,
	signal?: AbortSignal,
) => {
	return backendRequest<SimulationsDescriptionResponse>({
		url: `/events/${eventId}/view/${viewName}/simulations`,
		method: 'get',
		signal,
	});
};

export const getMisApiSimulationsDiscoveryGetSimulationDescriptionsQueryKey = (
	eventId: EventId,
	viewName: ViewName,
) => [`/events/${eventId}/view/${viewName}/simulations`];

export type MisApiSimulationsDiscoveryGetSimulationDescriptionsQueryResult = NonNullable<
	Awaited<ReturnType<typeof misApiSimulationsDiscoveryGetSimulationDescriptions>>
>;
export type MisApiSimulationsDiscoveryGetSimulationDescriptionsQueryError = ErrorType<void>;

export const useMisApiSimulationsDiscoveryGetSimulationDescriptions = <
	TData = Awaited<ReturnType<typeof misApiSimulationsDiscoveryGetSimulationDescriptions>>,
	TError = ErrorType<void>,
>(
	eventId: EventId,
	viewName: ViewName,
	options?: {
		query?: UseQueryOptions<
			Awaited<ReturnType<typeof misApiSimulationsDiscoveryGetSimulationDescriptions>>,
			TError,
			TData
		>;
	},
): UseQueryResult<TData, TError> & { queryKey: QueryKey } => {
	const { query: queryOptions } = options ?? {};

	const queryKey =
		queryOptions?.queryKey ??
		getMisApiSimulationsDiscoveryGetSimulationDescriptionsQueryKey(eventId, viewName);

	const queryFn: QueryFunction<
		Awaited<ReturnType<typeof misApiSimulationsDiscoveryGetSimulationDescriptions>>
	> = ({ signal }) => misApiSimulationsDiscoveryGetSimulationDescriptions(eventId, viewName, signal);

	const query = useQuery<
		Awaited<ReturnType<typeof misApiSimulationsDiscoveryGetSimulationDescriptions>>,
		TError,
		TData
	>(queryKey, queryFn, { enabled: !!(eventId && viewName), ...queryOptions }) as UseQueryResult<
		TData,
		TError
	> & { queryKey: QueryKey };

	query.queryKey = queryKey;

	return query;
};

/**
 * Returns duration tree object with applied simulations
 * @summary Get the result for one or more simulations
 */
export const misApiSimulationsResultProcessSimulationRequest = (
	eventId: EventId,
	viewName: ViewName,
	simulationsRequest: SimulationsRequest,
) => {
	return backendRequest<SimulationResult>({
		url: `/events/${eventId}/view/${viewName}/simulations`,
		method: 'post',
		headers: { 'Content-Type': 'application/json' },
		data: simulationsRequest,
	});
};

export type MisApiSimulationsResultProcessSimulationRequestMutationResult = NonNullable<
	Awaited<ReturnType<typeof misApiSimulationsResultProcessSimulationRequest>>
>;
export type MisApiSimulationsResultProcessSimulationRequestMutationBody = SimulationsRequest;
export type MisApiSimulationsResultProcessSimulationRequestMutationError = ErrorType<void>;

export const useMisApiSimulationsResultProcessSimulationRequest = <
	TError = ErrorType<void>,
	TContext = unknown,
>(options?: {
	mutation?: UseMutationOptions<
		Awaited<ReturnType<typeof misApiSimulationsResultProcessSimulationRequest>>,
		TError,
		{ eventId: EventId; viewName: ViewName; data: SimulationsRequest },
		TContext
	>;
}) => {
	const { mutation: mutationOptions } = options ?? {};

	const mutationFn: MutationFunction<
		Awaited<ReturnType<typeof misApiSimulationsResultProcessSimulationRequest>>,
		{ eventId: EventId; viewName: ViewName; data: SimulationsRequest }
	> = (props) => {
		const { eventId, viewName, data } = props ?? {};

		return misApiSimulationsResultProcessSimulationRequest(eventId, viewName, data);
	};

	return useMutation<
		Awaited<ReturnType<typeof misApiSimulationsResultProcessSimulationRequest>>,
		TError,
		{ eventId: EventId; viewName: ViewName; data: SimulationsRequest },
		TContext
	>(mutationFn, mutationOptions);
};
