/**
 * Generated by orval v6.11.0 🍺
 * Do not edit manually.
 * Maintenance Insights Service
 * Maintenance Insighs Service provides analytical insights about maintenance events
 * OpenAPI spec version: 1.0.0
 */
import { useQuery, useMutation } from '@tanstack/react-query';
import type {
	UseQueryOptions,
	UseMutationOptions,
	QueryFunction,
	MutationFunction,
	UseQueryResult,
	QueryKey,
} from '@tanstack/react-query';
import type { EventId, CutoverExportOutput, DurationTreeFlat } from '../model';
import { backendRequest } from '../../utils/backendRequest';
import type { ErrorType } from '../../utils/backendRequest';

/**
 * Returns a .xlsx file. Please note that the {event_id} field is only required due to the ABAP Server blocking requests without it.
 * @summary Get the cutover plan excel export template file
 */
export const misApiCutoverCutoverTemplateGetTemplateFile = (eventId: EventId, signal?: AbortSignal) => {
	return backendRequest<string>({ url: `/events/${eventId}/cutover/export`, method: 'get', signal });
};

export const getMisApiCutoverCutoverTemplateGetTemplateFileQueryKey = (eventId: EventId) => [
	`/events/${eventId}/cutover/export`,
];

export type MisApiCutoverCutoverTemplateGetTemplateFileQueryResult = NonNullable<
	Awaited<ReturnType<typeof misApiCutoverCutoverTemplateGetTemplateFile>>
>;
export type MisApiCutoverCutoverTemplateGetTemplateFileQueryError = ErrorType<void>;

export const useMisApiCutoverCutoverTemplateGetTemplateFile = <
	TData = Awaited<ReturnType<typeof misApiCutoverCutoverTemplateGetTemplateFile>>,
	TError = ErrorType<void>,
>(
	eventId: EventId,
	options?: {
		query?: UseQueryOptions<
			Awaited<ReturnType<typeof misApiCutoverCutoverTemplateGetTemplateFile>>,
			TError,
			TData
		>;
	},
): UseQueryResult<TData, TError> & { queryKey: QueryKey } => {
	const { query: queryOptions } = options ?? {};

	const queryKey =
		queryOptions?.queryKey ?? getMisApiCutoverCutoverTemplateGetTemplateFileQueryKey(eventId);

	const queryFn: QueryFunction<Awaited<ReturnType<typeof misApiCutoverCutoverTemplateGetTemplateFile>>> = ({
		signal,
	}) => misApiCutoverCutoverTemplateGetTemplateFile(eventId, signal);

	const query = useQuery<
		Awaited<ReturnType<typeof misApiCutoverCutoverTemplateGetTemplateFile>>,
		TError,
		TData
	>(queryKey, queryFn, { enabled: !!eventId, ...queryOptions }) as UseQueryResult<TData, TError> & {
		queryKey: QueryKey;
	};

	query.queryKey = queryKey;

	return query;
};

/**
 * Returns a .xlsx file filled in with custom cutover data. Please note that the {event_id} field is only required due to the ABAP Server blocking requests without it.
 * @summary Get an excel file containing the cutover plan as specified in received parameters
 */
export const misApiCutoverCutoverGetExcel = (eventId: EventId, durationTreeFlat: DurationTreeFlat) => {
	return backendRequest<CutoverExportOutput>({
		url: `/events/${eventId}/cutover/export`,
		method: 'post',
		headers: { 'Content-Type': 'application/json' },
		data: durationTreeFlat,
	});
};

export type MisApiCutoverCutoverGetExcelMutationResult = NonNullable<
	Awaited<ReturnType<typeof misApiCutoverCutoverGetExcel>>
>;
export type MisApiCutoverCutoverGetExcelMutationBody = DurationTreeFlat;
export type MisApiCutoverCutoverGetExcelMutationError = ErrorType<void>;

export const useMisApiCutoverCutoverGetExcel = <TError = ErrorType<void>, TContext = unknown>(options?: {
	mutation?: UseMutationOptions<
		Awaited<ReturnType<typeof misApiCutoverCutoverGetExcel>>,
		TError,
		{ eventId: EventId; data: DurationTreeFlat },
		TContext
	>;
}) => {
	const { mutation: mutationOptions } = options ?? {};

	const mutationFn: MutationFunction<
		Awaited<ReturnType<typeof misApiCutoverCutoverGetExcel>>,
		{ eventId: EventId; data: DurationTreeFlat }
	> = (props) => {
		const { eventId, data } = props ?? {};

		return misApiCutoverCutoverGetExcel(eventId, data);
	};

	return useMutation<
		Awaited<ReturnType<typeof misApiCutoverCutoverGetExcel>>,
		TError,
		{ eventId: EventId; data: DurationTreeFlat },
		TContext
	>(mutationFn, mutationOptions);
};
